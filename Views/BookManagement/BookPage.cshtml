@model OnlineLibrary.Models.Book

@{
    ViewData["Title"] = "Book Details";
    var averageRating = ViewBag.AverageRating ?? 0;
    var reviewCount = ViewBag.ReviewCount ?? 0;
    var similarBooks = ViewBag.SimilarBooks as List<OnlineLibrary.Models.Book> ?? new List<OnlineLibrary.Models.Book>();
}

<div class="book-page-container">
    <div class="book-details-container">
        <div class="book-image-container">
            @if (!string.IsNullOrEmpty(Model.CoverImageUrl))
            {
                <img src="/img/@Model.CoverImageUrl" alt="@Model.Name Cover" class="book-cover-image" />
            }
            else
            {
                <img src="/img/book-placeholder.jpg" alt="@Model.Name Cover" class="book-cover-image" />
            }

            <div class="book-availability @(Model.AvailableCopies > 0 ? "available" : "unavailable")">
                <span>@(Model.AvailableCopies > 0 ? "Available" : "Unavailable")</span>
            </div>
        </div>

        <div class="book-info-container">
            <h1 class="book-title">@Model.Name</h1>
            <h3 class="book-author">by @Model.Author</h3>

            <div class="book-metadata">
                <div class="metadata-item">
                    <span class="metadata-label">Published:</span>
                    <span class="metadata-value">@Model.ReleaseDate.ToString("MMMM d, yyyy")</span>
                </div>
                @if (Model.Pages > 0)
                {
                    <div class="metadata-item">
                        <span class="metadata-label">Pages:</span>
                        <span class="metadata-value">@Model.Pages</span>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Model.ISBN))
                {
                    <div class="metadata-item">
                        <span class="metadata-label">ISBN:</span>
                        <span class="metadata-value">@Model.ISBN</span>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Model.Genre))
                {
                    <div class="metadata-item">
                        <span class="metadata-label">Genre:</span>
                        <span class="metadata-value">@Model.Genre</span>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Model.Language))
                {
                    <div class="metadata-item">
                        <span class="metadata-label">Language:</span>
                        <span class="metadata-value">@Model.Language</span>
                    </div>
                }
                <div class="metadata-item">
                    <span class="metadata-label">Available Copies:</span>
                    <span class="metadata-value">@Model.AvailableCopies</span>
                </div>
            </div>

            <div class="book-description">
                <h4>Description</h4>
                <p>@(string.IsNullOrEmpty(Model.Description) ? "No description available." : Model.Description)</p>
            </div>

            <div class="book-actions">
                @if (Model.AvailableCopies > 0)
                {
                    <a href="@Url.Action("BorrowPage", "BookManagement", new { id = Model.BookId })" class="btn btn-primary btn-borrow">Borrow This Book</a>
                }
                else
                {
                    <button class="btn btn-secondary btn-borrow" disabled>Currently Unavailable</button>
                }
                <button class="btn btn-success btn-review" data-bs-toggle="modal" data-bs-target="#reviewModal">Write a Review</button>
            </div>

            <div class="book-ratings">
                <h4>Ratings & Reviews</h4>
                <div class="overall-rating">
                    <div class="rating-stars">
                        @for (int i = 1; i <= 5; i++)
                        {
                            var floorRating = Math.Floor((double)averageRating);

                            if (i <= floorRating)
                            {
                                <i class="fas fa-star"></i>
                            }
                            else if (i - 0.5 <= (double)averageRating)
                            {
                                <i class="fas fa-star-half-alt"></i>
                            }
                            else
                            {
                                <i class="far fa-star"></i>
                            }
                        }

                    </div>
                    <span class="rating-value">@averageRating.ToString("0.0")/5</span>
                    <span class="rating-count">(@reviewCount reviews)</span>
                </div>

                <div class="user-reviews">
                    @if (Model.Reviews != null && Model.Reviews.Any())
                    {
                        foreach (var review in Model.Reviews.OrderByDescending(r => r.ReviewDate).Take(5))
                        {
                            <div class="review-item">
                                <div class="review-header">
                                    <span class="reviewer-name">@review.ReviewerName</span>
                                    <div class="review-rating">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            if (i <= review.Rating)
                                            {
                                                <i class="fas fa-star"></i>
                                            }
                                            else
                                            {
                                                <i class="far fa-star"></i>
                                            }
                                        }
                                    </div>
                                </div>
                                <p class="review-date">@review.ReviewDate.ToString("MMMM d, yyyy")</p>
                                <p class="review-text">@review.ReviewText</p>
                            </div>
                        }
                    }
                    else
                    {
                        <p>No reviews yet. Be the first to review this book!</p>
                    }
                </div>

                @if (Model.Reviews != null && Model.Reviews.Count > 5)
                {
                    <a href="#" class="view-all-reviews">View all @Model.Reviews.Count reviews</a>
                }
            </div>
        </div>
    </div>

    @if (similarBooks.Any())
    {
        <div class="similar-books-section">
            <h3>You May Also Like</h3>
            <div class="similar-books-container">
                @foreach (var book in similarBooks)
                {
                    <div class="similar-book-item">
                        <a href="@Url.Action("BookPage", "BookManagement", new { id = book.BookId })">
                            @if (!string.IsNullOrEmpty(book.CoverImageUrl))
                            {
                                <img src="/img/@book.CoverImageUrl" alt="@book.Name" />
                            }
                            else
                            {
                                <img src="/img/book-placeholder.jpg" alt="@book.Name" />
                            }
                            <h5>@book.Name</h5>
                            <p>@book.Author</p>
                        </a>
                    </div>
                }
            </div>
        </div>
    }
</div>

<!-- Review Modal -->
<div class="modal fade" id="reviewModal" tabindex="-1" aria-labelledby="reviewModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="reviewModalLabel">Write a Review for "@Model.Name"</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="reviewForm" asp-action="AddReview" asp-controller="BookManagement" method="post">
                    <input type="hidden" name="bookId" value="@Model.BookId" />
                    @Html.AntiForgeryToken()

                    <div class="form-group mb-3">
                        <label for="reviewerName">Your Name</label>
                        <input type="text" class="form-control" id="reviewerName" name="reviewerName" required>
                    </div>
                    <div class="form-group mb-3">
                        <label>Your Rating</label>
                        <div class="rating-selector">
                            <div class="star-rating">
                                <i class="far fa-star" data-rating="1"></i>
                                <i class="far fa-star" data-rating="2"></i>
                                <i class="far fa-star" data-rating="3"></i>
                                <i class="far fa-star" data-rating="4"></i>
                                <i class="far fa-star" data-rating="5"></i>
                            </div>
                            <input type="hidden" id="selectedRating" name="rating" value="0" required>
                            <div class="rating-text">Select a rating</div>
                        </div>
                    </div>
                    <div class="form-group mb-3">
                        <label for="reviewText">Your Review</label>
                        <textarea class="form-control" id="reviewText" name="reviewText" rows="5" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="reviewForm" class="btn btn-primary">Submit Review</button>
            </div>
        </div>
    </div>
</div>

<link rel="stylesheet" href="~/css/book-management-book-page.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Star rating functionality
        const stars = document.querySelectorAll('.star-rating i');
        const ratingText = document.querySelector('.rating-text');
        const selectedRating = document.getElementById('selectedRating');

        stars.forEach(star => {
            star.addEventListener('mouseover', function() {
                const rating = this.getAttribute('data-rating');
                highlightStars(rating);
                updateRatingText(rating);
            });

            star.addEventListener('mouseout', function() {
                const currentRating = selectedRating.value;
                if (currentRating > 0) {
                    highlightStars(currentRating);
                    updateRatingText(currentRating);
                } else {
                    resetStars();
                    ratingText.textContent = 'Select a rating';
                }
            });

            star.addEventListener('click', function() {
                const rating = this.getAttribute('data-rating');
                selectedRating.value = rating;
                highlightStars(rating);
                updateRatingText(rating);
            });
        });

        function highlightStars(rating) {
            stars.forEach(star => {
                const starRating = star.getAttribute('data-rating');
                if (starRating <= rating) {
                    star.classList.remove('far');
                    star.classList.add('fas');
                } else {
                    star.classList.remove('fas');
                    star.classList.add('far');
                }
            });
        }

        function resetStars() {
            stars.forEach(star => {
                star.classList.remove('fas');
                star.classList.add('far');
            });
        }

        function updateRatingText(rating) {
            const ratingTexts = [
                'Select a rating',
                'Poor',
                'Fair',
                'Good',
                'Very Good',
                'Excellent'
            ];
            ratingText.textContent = ratingTexts[rating];
        }
    });
</script>